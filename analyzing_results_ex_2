-- ex 2 
-- create a new term view_binary_metric. 
-- Count the number of users per treatment group,
-- and count the number of users with views for test_id 7

-- there are some differences here from the solution video

SELECT 
  views.test_assignment, -- I have named the outer query views and the new JOIN query views_completed
  COUNT(views.user_id) AS users,
  SUM(views.views_binary) AS views_binary
FROM 
-- order_binary from line 185
  (
  SELECT 
  -- in the solution video the name of the table is assignments and not test_events (I was lazy and kept them as test_events)
    test_events.test_id,
    test_events.test_assignment,
    test_events.user_id,
    MAX(CASE WHEN views_completed.event_time > test_events.event_time THEN 1 ELSE 0 END) AS views_binary
  FROM 
    (
    SELECT 
      event_id,
      event_time,
      user_id,
      MAX(CASE WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT) ELSE NULL END) AS test_id,
      MAX(CASE WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT) ELSE NULL END) AS test_assignment 
    FROM
      dsv1069.events
    WHERE 
      event_name = 'test_assignment'
    GROUP BY 
      event_id,
      event_time,
      user_id
    ) test_events -- test_events and not assignments
  LEFT OUTER JOIN
    (
    SELECT 
      * 
    FROM 
      dsv1069.events 
    WHERE 
      event_name = 'view_item'
    ) views_completed
  ON 
    test_events.user_id = views_completed.user_id 
  GROUP BY 
    test_events.test_id,
    test_events.test_assignment,
    test_events.user_id
  ) views
WHERE 
  test_id = 7
GROUP BY 
  test_assignment
